
# Background --------------------------------------------------------------

# This is the shiny app for the Brugada Syndrome Risk Stratification. 


# Housekeeping ------------------------------------------------------------

library(shiny)
library(shinythemes)
library(shinyalert)
library(ggplot2)
library(shinyWidgets)
library(plotly)

# Global Scope ------------------------------------------------------------

# User risk variable
user_risk <- 0

# Data used to generate the line graph
RF_tab <- read.csv(file = "RF_Tab_Clean.csv", header = TRUE)


ui <- fluidPage(
  
  theme = shinythemes::shinytheme("cosmo"),
  
  shinyalert::useShinyalert(),
  
  
 titlePanel("Brugada Syndrome Risk Stratification"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      
      # Start of variable 1: Probable arrhythmia related syncope
      fluidRow(
        column(width = 7, 
               h5("Probable arrhythmia related syncope")),
        column(width = 1, 
               switchInput(inputId = "PARS", onLabel = "Yes", offLabel = "No"))
        ), # End of fluid row
      
      # Start of variable 2: Spontaneous Type 1 Brugada ECG pattern
      fluidRow(
        column(width = 7, 
               h5("Spontaneous Type 1 Brugada ECG pattern")),
        column(width = 1, 
               switchInput(inputId = "ST1_BS_ECG", onLabel = "Yes", offLabel = "No"))
      ), # End of fluid row
      
      
      # Start of variable 3: Early repolarization in peripheral leads
      fluidRow(
        column(width = 7, 
               h5("Early repolarization in peripheral leads")),
        column(width = 1, 
               switchInput(inputId = "ER", onLabel = "Yes", offLabel = "No"))
      ), # End of fluid row
      
      # Start of variable 4: Type 1 Brugada pattern in peripheral leads
      fluidRow(
        column(width = 7, 
               h5("Type 1 Brugada pattern in peripheral leads")),
        column(width = 1, 
               switchInput(inputId = "T1BP", onLabel = "Yes", offLabel = "No"))
      ), # End of fluid row
      
      # This is where the radial dial will be
      fluidRow(column(width = 12, plotOutput(outputId = "plot_circle", width = "100%")))
      
    ), # end of side panel
    
    mainPanel( 
      
      p("BRUGADA-RISK estimates the risk of ventricular arrhythmias (VA) or sudden cardiac death (SCD) at 5 years in patients with Brugada syndrome. BRUGADA-RISK has a sensitivity of 71.2% and a specificity of 80.2% for the prediction of VA/SCD at 5 years."),
      p("Risk for an individual patient can be calculated from the following equation:"), 
      code(em("Probable arrhythmia related syncope +\n
                 Spontaneous Type 1 Brugada ECG pattern + \n
                 Early repolarization in peripheral leads +
                 Type 1 Brugada pattern in peripheral leads")), 
      
      br(),

      p("Reference: S Honarbakhsh, R Providencia, J Garcia-Hernandez, et al â€¦ , PD Lambiase. A Primary Prevention Clinical Risk Score Model for Patients With Brugada Syndrome (BRUGADA-RISK). JACC Clin Electrophysiol 2020 Oct 28;", a("[EPub Ahead of Print]", href="https://www.jacc.org/doi/10.1016/j.jacep.2020.08.032")),
      
      
      br(),
      
      fluidRow(column(width = 12,
                      plotlyOutput(outputId = "plot_linegraph")))
      
      ) # End of main panel
  ) # End of side bar layout
)# End of fluidpage 

server <- function(input, output, session){
  
  shinyalert(
    title = "Hello",
    text = "Brugada Syndrome Risk Stratification. Predict ventricular arrhythmias / SCD at 5 years",
    size = "s", 
    closeOnEsc = TRUE,
    closeOnClickOutside = TRUE,
    html = TRUE,
    type = "warning",
    showConfirmButton = TRUE,
    showCancelButton = FALSE,
    confirmButtonText = "OK",
    confirmButtonCol = "#AEDEF4",
    timer = 0,
    imageUrl = "",
    animation = TRUE
  )
  
  
  # Storing the reactive values
  react_pars <- reactiveValues()
  
  # PARS
  observeEvent(eventExpr = input$PARS, handlerExpr = {
    ifelse(test = input$PARS == TRUE, 
           yes = {react_pars$PARS <- 12}, 
           no = {react_pars$PARS <- 0} ) 
    })
  
  #ST1_BS_ECG
  observeEvent(eventExpr = input$ST1_BS_ECG, handlerExpr = {
    ifelse(test = input$ST1_BS_ECG == TRUE, 
           yes = {react_pars$ST1_BS_ECG <- 14}, 
           no = {react_pars$ST1_BS_ECG <- 0} ) 
  })
  
  #ER
  observeEvent(eventExpr = input$ER, handlerExpr = {
    ifelse(test = input$ER == TRUE, 
           yes = {react_pars$ER <- 12}, 
           no = {react_pars$ER <- 0} ) 
  })
  
  #T1BP
  observeEvent(eventExpr = input$T1BP, handlerExpr = {
    ifelse(test = input$T1BP == TRUE, 
           yes = {react_pars$T1BP <- 9}, 
           no = {react_pars$T1BP <- 0} ) 
  })
  
  output$plot_circle <- renderPlot(expr = {
    
    user_risk <- sum(react_pars[['PARS']],
                     react_pars[['ST1_BS_ECG']], 
                     react_pars[['ER']],
                     react_pars[['T1BP']])
    
    data <- data.frame(
      category = c("user_risk", "max_risk"),
      count = c(user_risk, 47))
    
    # Compute percentages
    data$fraction = data$count / 47
    
    # Compute the cumulative percentages (top of each rectangle)
    data$ymax = data$fraction
    
    # Compute the bottom of each rectangle
    data$ymin = c(0, head(data$ymax, n=-1))
    
    # Make the plot
    base_colour <- "#DBEAE0"
    #fill_col <- "#C69A60"
    fill_col_range <- seq(from = 1, to = 5, by = 1)
    names(fill_col_range) <- c("#4C8C4C", "#82C57B", "#CBCC85", "#DD9854", "#B22B3B")
    fill_col_index <- round(quantile(fill_col_range, user_risk/47))
    fill_col <- fill_col_range[fill_col_index]
    
    # Making the label that fits inside the circle 
    #risk_at_5 <- "tmp"
    risk_at_5 <- subset(RF_tab, Risk_Score == user_risk & country == "Average")
    risk_at_5 <- paste0(unique(risk_at_5$Predicted_Risk), "%")
    
    label_user_score <- c(paste("User score:", user_risk))
    label_predicted_event <- c(paste("Average predicted event \n over 5 years:", risk_at_5))
    label_display <- paste(label_user_score, "\n", "\n", label_predicted_event)
    
    ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
      geom_rect() +
      coord_polar(theta = "y") + # Try to remove that to understand how the chart is built initially
      annotate("text", label = label_display, size = 6.5, x = 0, y = 0) +
      scale_fill_manual(values = c(base_colour, names(fill_col))) +
      theme_void() +
      theme(legend.position = "none") 
  }
  )
  

  output$plot_linegraph <- renderPlotly(expr = {
    user_risk <- sum(react_pars[['PARS']],
                     react_pars[['ST1_BS_ECG']],
                     react_pars[['ER']],
                     react_pars[['T1BP']])
    

    static_plot <- ggplot(data = RF_tab, aes(x = Risk_Score, y = Predicted_Risk, colour = country)) +
      geom_point() +
      geom_line() +
      geom_vline(xintercept = user_risk) +
      xlab(label = "Total Risk Points") +
      ylab(label = "Five Year Predicted Risk of VA/SCD") +
      ggtitle(label = "Predicted Event Rates Over 5 Years") +
      scale_x_continuous(breaks = seq(from = 0, to = 47, by = 5)) +
      scale_y_continuous(breaks = seq(from = 0, to = 100, by = 10), 
                         limits = c(0, 100)) +
      scale_color_brewer(palette = "Paired", name = "Country") +
      theme_minimal() 
    
    interactive_plot <- ggplotly(p = static_plot)
    interactive_plot
  })
  
  
  
  
  
  
  
}


shinyApp(ui = ui, server = server)